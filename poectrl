#! /bin/env python
"""Control PoE on supported routers."""
import json
from pathlib import Path

import typer
from rich import print

from poelib import PoECtrl


def get_profile():
    """Read the profile data from a JSON file.

    Priority:
        poectrl.json in the WORKING directory.
        poectrl.json in the USER'S HOME directory.

    If both these are missing, raise an error.
    """
    config_filename = Path("poectrl.json")
    local_config_file = Path.cwd() / config_filename
    home_config_file = Path.home() / config_filename

    if local_config_file.exists():
        filename = local_config_file
    elif home_config_file.exists():
        filename = home_config_file
    else:
        print(" [red]The configuration file cannot be found, aborting.")
        raise typer.Exit(2)

    try:
        print(f"[green]Using configuration from {filename}")
        with open(filename) as f:
            return json.load(f)
    except json.JSONDecodeError:
        print("[red]-> Error parsing the configuration file, aborting.")
        raise typer.Exit(3)


def activate_profile(profiles: dict, chosen_profile: str):
    """Activate the specified profile."""
    if chosen_profile not in list(profiles["profiles"]):
        print(
            f"[red]-> The profile '[bold]{chosen_profile}[/bold]' does not "
            "exist, aborting!"
        )
        raise typer.Exit(1)
    else:
        this_profile = dict(profiles["profiles"][chosen_profile])
        for device in this_profile:
            try:
                auth = profiles["devices"][device]
                poe = PoECtrl(device, auth["user"], auth["password"])
                poe.process_device(this_profile[device])
            except KeyError as err:
                print(f"[red]-> Device {err} has not been defined, skipping.")


def main(chosen_profile: str, info: bool = False):
    """Run the provided profile.

    Turn PoE ports on/off depending on the settings in the Profile.
    """
    profiles = get_profile()
    if info:
        # this is just a temp placeholder, I'll write a prettier one later.
        print(json.dumps(profiles["profiles"][chosen_profile], indent=4))
    else:
        activate_profile(profiles, chosen_profile)


if __name__ == "__main__":
    typer.run(main)
