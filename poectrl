#! /bin/env python
"""Control PoE on supported routers."""
import json

import typer
from rich import print

from poelib import PoECtrl
from poelib.errors import BadConfigurationError, MissingConfigurationError
from poelib.profiles import Profile


def activate_profile(profile: dict, devices: dict):
    """Activate the specified profile."""
    for device in profile:
        try:
            auth = devices[device]
            poe = PoECtrl(device, auth["user"], auth["password"])
            poe.process_device(profile[device])
        except KeyError as err:
            print(f"[red]-> Device {err} has not been defined, skipping.")


def main(chosen_profile: str, info: bool = False):
    """Run the provided profile.

    Turn PoE ports on/off depending on the settings in the Profile.
    """
    try:
        profile_data = Profile("poectrl.json")
        profiles = profile_data.get_profiles()
        devices = profile_data.get_devices()
    except MissingConfigurationError:
        print("[red]-> Cannot find a configuration file. Aborting")
        raise typer.Exit(1)
    except BadConfigurationError:
        print("[red]-> Invalid configuration file. Aborting")
        raise typer.Exit(2)

    if info:
        # this is just a temp placeholder, I'll write a prettier one later.
        print(json.dumps(profiles[chosen_profile], indent=4))
    else:
        try:
            this_profile = profiles[chosen_profile]
        except KeyError:
            print(
                f"[red]-> The profile '[bold]{chosen_profile}[/bold]' does not "
                "exist, aborting!"
            )
            raise typer.Exit(3)

        activate_profile(this_profile, devices)


if __name__ == "__main__":
    typer.run(main)
